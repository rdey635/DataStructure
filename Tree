package ds.tree;

import java.util.Stack;

class Node1 
{ 
int data; 
Node1 leftChild; 
Node1 rightChild; 
Node1(int data) 
{ 
    this.data = data;  
} 
} 
  
public class zigzagTraversal {
	Node1 root;

	public static void main(String[] args) {
	
		zigzagTraversal tree = new zigzagTraversal();
		tree.root= new Node1(1);
		tree.root.leftChild=new Node1(2);
		tree.root.rightChild= new Node1(3);
		//Child of 2
		tree.root.leftChild.leftChild=new Node1(4);
		tree.root.leftChild.rightChild= new Node1(5);
		//Child of 3
		tree.root.rightChild.leftChild=new Node1(6);
		tree.root.rightChild.rightChild= new Node1(7);
		System.out.println("ZigZag Order traversal of binary tree is"); 
		//1,3,2,4,5,6,7
		tree.printZigZagTraversal();
		

	}

	private void printZigZagTraversal() {
		Stack<Node1> s1= new Stack<Node1>();
		Stack<Node1> s2= new Stack<Node1>();
		s1.push(root);
		//Outer loop
		while(!s1.isEmpty() || !s2.isEmpty()) {
			
			
			
			while(!s1.isEmpty()) {
				Node1 tmp=s1.pop();
				System.out.print(tmp.data+" ");
				if(null!=tmp.leftChild) {
					s2.push(tmp.leftChild);
				}
				if(null!=tmp.rightChild) {
					s2.push(tmp.rightChild);
				}
			}
			while(!s2.isEmpty()) {
				
				Node1 tmp=s2.pop();
				System.out.print(tmp.data+" ");
				if(null!=tmp.rightChild) {
					s1.push(tmp.rightChild);
				}
				if(null!=tmp.leftChild) {
					s1.push(tmp.leftChild);
				}
			}
		}
		
		
	}

}
